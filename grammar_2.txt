number /[0-9]+(\.[0-9]*)?([eE][\+\-]?[0-9]+)?/ { Double.Parse(text) }
plus /\+/ { '+' }
minus /\-/ { '-' }
mul /\*/ { '*' }
del /\// { '/' }
pow /\^/ { '^' }
def /def/ { "def" }
id /[a-z_][a-z_0-9]*/ { text }
lparen /\(/ { '(' }
rparen /\)/ { ')' }
comma /,/ { ',' }
assign /=/ { '=' }
/ +/
%%

%top {
using System.Linq;
}

E -> %left6 E plus E { _2, _1, _3 }
    | %left6 E minus E { _2, _1, _3 }
    | %left7 E mul E { _2, _1, _3 }
    | %left7 E del E { _2, _1, _3 }
    | %right8 E pow E { _2, _1, _3 }
    | %right1 id assign E { _2, _1, _3 }
    | lparen E rparen { _2 }
    | number { _1 }
    | id { _1 }
    | %non9 minus E { _1, _2 }
    | %right1 def id lparen DefArgs rparen assign E { _1, _2, _4, _7 }
    | id lparen Args rparen { _1, _3 }
    ;

Args -> E comma Args { new List<string>(new string[] { _1 }).Concat((List<string>) _3).ToList() }
    | E { new List<string>(new string[] { _1 }) }
    ;

DefArgs -> id comma DefArgs { new List<string>(new string[] { _1 }).Concat((List<string>) _3).ToList() }
    | id { new List<string>(new string[] { _1 }) }
    ;